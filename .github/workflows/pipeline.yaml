name: Pipeline

on:
  push:
    branches:
      - main
      - feature/*
  delete:
    branches:
      - feature/*


env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: sam-app
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::679030745910:role/aws-sam-cli-managed-dev-pipel-PipelineExecutionRole-oP7blLY6M6pE
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::679030745910:role/aws-sam-cli-managed-prod--CloudFormationExecutionRo-7dAHnUlAPUH7
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline--artifactsbucket-jxbibt5q9inv
  TESTING_IMAGE_REPOSITORY: 679030745910.dkr.ecr.ap-south-1.amazonaws.com/whatsapp-crm-backend
  TESTING_REGION: ap-south-1
  PROD_STACK_NAME: sam-app-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::679030745910:role/aws-sam-cli-managed-prod-pipe-PipelineExecutionRole-H0B6IwPL6O2a
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::679030745910:role/aws-sam-cli-managed-prod--CloudFormationExecutionRo-7dAHnUlAPUH7
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline--artifactsbucket-jxbibt5q9inv
  PROD_IMAGE_REPOSITORY: 679030745910.dkr.ecr.ap-south-1.amazonaws.com/whatsapp-crm-backend
  PROD_REGION: ap-south-1

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: echo "Run your test commands here"

  delete-feature:
    if: github.event_name == 'delete' && startsWith(github.ref, 'refs/heads/feature')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Delete feature branch stack
        env:
          FEATURE_BRANCH_NAME: ${{ github.ref }}
          TESTING_REGION: ${{ env.TESTING_REGION }}
        run: |
          sam delete \
            --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region ${TESTING_REGION} \
            --no-prompts

  build-and-deploy-feature:
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Build SAM app
        run: sam build --template ${{ env.SAM_TEMPLATE }} --use-container
      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: feature-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Deploy feature stack
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
          TESTING_REGION: ${{ env.TESTING_REGION }}
          TESTING_ARTIFACTS_BUCKET: ${{ env.TESTING_ARTIFACTS_BUCKET }}
          TESTING_IMAGE_REPOSITORY: ${{ env.TESTING_IMAGE_REPOSITORY }}
          TESTING_CLOUDFORMATION_EXECUTION_ROLE: ${{ env.TESTING_CLOUDFORMATION_EXECUTION_ROLE }}
        run: |
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  build-and-package:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Build resources
        run: sam build --template ${{ env.SAM_TEMPLATE }} --use-container
      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Upload artifacts to testing artifact bucket
        env:
          TESTING_ARTIFACTS_BUCKET: ${{ env.TESTING_ARTIFACTS_BUCKET }}
          TESTING_IMAGE_REPOSITORY: ${{ env.TESTING_IMAGE_REPOSITORY }}
          TESTING_REGION: ${{ env.TESTING_REGION }}
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-testing.yaml
          path: packaged-testing.yaml
      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Upload artifacts to production artifact bucket
        env:
          PROD_ARTIFACTS_BUCKET: ${{ env.PROD_ARTIFACTS_BUCKET }}
          PROD_IMAGE_REPOSITORY: ${{ env.PROD_IMAGE_REPOSITORY }}
          PROD_REGION: ${{ env.PROD_REGION }}
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-testing:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v4
        with:
          name: packaged-testing.yaml
      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Deploy to testing account
        env:
          TESTING_STACK_NAME: ${{ env.TESTING_STACK_NAME }}
          TESTING_REGION: ${{ env.TESTING_REGION }}
          TESTING_ARTIFACTS_BUCKET: ${{ env.TESTING_ARTIFACTS_BUCKET }}
          TESTING_IMAGE_REPOSITORY: ${{ env.TESTING_IMAGE_REPOSITORY }}
          TESTING_CLOUDFORMATION_EXECUTION_ROLE: ${{ env.TESTING_CLOUDFORMATION_EXECUTION_ROLE }}
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  integration-test:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run integration tests
        run: echo "Run integration tests here"

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    # Uncomment and configure environment below to enable manual approval
    # environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v4
        with:
          name: packaged-prod.yaml
      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true
      - name: Deploy to production account
        env:
          PROD_STACK_NAME: ${{ env.PROD_STACK_NAME }}
          PROD_REGION: ${{ env.PROD_REGION }}
          PROD_ARTIFACTS_BUCKET: ${{ env.PROD_ARTIFACTS_BUCKET }}
          PROD_IMAGE_REPOSITORY: ${{ env.PROD_IMAGE_REPOSITORY }}
          PROD_CLOUDFORMATION_EXECUTION_ROLE: ${{ env.PROD_CLOUDFORMATION_EXECUTION_ROLE }}
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
